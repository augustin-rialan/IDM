/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Qcm";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQcm
entryRuleQcm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQcmRule()); }
	iv_ruleQcm=ruleQcm
	{ $current=$iv_ruleQcm.current; }
	EOF;

// Rule Qcm
ruleQcm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Qcm'
		{
			newLeafNode(otherlv_0, grammarAccess.getQcmAccess().getQcmKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQcmAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='domaine'
			{
				newLeafNode(otherlv_2, grammarAccess.getQcmAccess().getDomaineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQcmAccess().getDomaineEStringParserRuleCall_2_1_0());
					}
					lv_domaine_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQcmRule());
						}
						set(
							$current,
							"domaine",
							lv_domaine_3_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='question'
		{
			newLeafNode(otherlv_4, grammarAccess.getQcmAccess().getQuestionKeyword_3());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getQcmAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQcmAccess().getQuestionQuestionParserRuleCall_5_0());
				}
				lv_question_6_0=ruleQuestion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQcmRule());
					}
					add(
						$current,
						"question",
						lv_question_6_0,
						"org.xtext.example.mydsl.MyDsl.Question");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getQcmAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQcmAccess().getQuestionQuestionParserRuleCall_6_1_0());
					}
					lv_question_8_0=ruleQuestion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQcmRule());
						}
						add(
							$current,
							"question",
							lv_question_8_0,
							"org.xtext.example.mydsl.MyDsl.Question");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getQcmAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getQcmAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='intitule'
			{
				newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getIntituleKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getIntituleEStringParserRuleCall_2_1_0());
					}
					lv_intitule_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"intitule",
							lv_intitule_3_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='reponse'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuestionAccess().getReponseKeyword_3());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getReponseReponseParserRuleCall_5_0());
				}
				lv_reponse_6_0=ruleReponse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					add(
						$current,
						"reponse",
						lv_reponse_6_0,
						"org.xtext.example.mydsl.MyDsl.Reponse");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getQuestionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getReponseReponseParserRuleCall_6_1_0());
					}
					lv_reponse_8_0=ruleReponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						add(
							$current,
							"reponse",
							lv_reponse_8_0,
							"org.xtext.example.mydsl.MyDsl.Reponse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleReponse
entryRuleReponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReponseRule()); }
	iv_ruleReponse=ruleReponse
	{ $current=$iv_ruleReponse.current; }
	EOF;

// Rule Reponse
ruleReponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReponseAccess().getReponseAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0='value'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getReponseAccess().getValueValueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReponseRule());
					}
					setWithLastConsumed($current, "value", true, "value");
				}
			)
		)?
		otherlv_2='Reponse'
		{
			newLeafNode(otherlv_2, grammarAccess.getReponseAccess().getReponseKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getReponseAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='data'
			{
				newLeafNode(otherlv_4, grammarAccess.getReponseAccess().getDataKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReponseAccess().getDataEStringParserRuleCall_4_1_0());
					}
					lv_data_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReponseRule());
						}
						set(
							$current,
							"data",
							lv_data_5_0,
							"org.xtext.example.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getReponseAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
